#!/usr/bin/env python3
"""
AutonomaX Product Agent
=======================

This script generates digital product listings and uploads them to the AutonomaX
Shopify integration using the `/ecom/shopify/import` endpoint.  It uses OpenAI's
Chat API to create product names and descriptions from a list of prompts and
associates each listing with an image you supply.  The resulting products are
sent to the AutonomaX API as JSON.

Before running, set the following environment variables:

OPENAI_API_KEY      - your OpenAI API key for generating names/descriptions
AUTONOMAX_API_URL   - base URL of the AutonomaX API (default: https://autonomax-api-lenljbhrqq-uc.a.run.app)
SHOP_DOMAIN         - your Shopify store domain (e.g. autonoma-x.myshopify.com)
SHOPIFY_ADMIN_TOKEN - private admin access token (used by AutonomaX, not by this script)

You will also need to provide one image file per product.  The image files
should be accessible to the AutonomaX backend.  If you host them in a public
storage bucket, you can put the URL directly into the `images` array below.

Usage:
    python autonomaX_product_agent.py
"""
import os
import json
import sys
import time
import pathlib
from typing import List, Dict

import requests

def generate_title_and_description(prompt: str, api_key: str) -> Dict[str, str]:
    """
    Use the OpenAI Chat API to generate a product title and HTML description.
    The prompt should describe the mood, style or subject of the digital artwork.

    Returns a dictionary with keys 'title' and 'body_html'.
    """
    # Compose a conversational instruction for the assistant.  The model is asked
    # to produce a short, evocative title and a rich HTML description formatted
    # for Shopify (paragraph tags, emphasised keywords, etc.).
    messages = [
        {"role": "system", "content": "You are an eâ€‘commerce copywriter specialising in digital art prints.  "
                                          "You create catchy product titles and detailed HTML descriptions for new products."},
        {"role": "user", "content": (
            f"Generate a unique, marketable product title and an engaging HTML description for a printable wall art poster.\n\n"
            f"Context: {prompt}\n\n"
            f"Requirements:\n"
            f"1. The title should be at most 60 characters and contain words related to the context.\n"
            f"2. The description must be valid HTML using <p> tags.  Describe the style, colours and mood of the artwork, "
            f"and suggest where it might be displayed.  Do not mention that this was generated by AI.\n"
            f"3. Do not include pricing, shipping or file details.\n\n"
            f"Respond in JSON with 'title' and 'body_html' fields."
        )}
    ]

    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "gpt-4o",
        "messages": messages,
        "temperature": 0.7,
        "max_tokens": 512,
        "response_format": {"type": "json_object"}
    }

    response = requests.post(
        "https://api.openai.com/v1/chat/completions",
        headers=headers,
        json=payload,
        timeout=60
    )
    response.raise_for_status()
    data = response.json()
    # The assistant returns a JSON string in the 'content' of its message
    content = data["choices"][0]["message"]["content"]
    try:
        obj = json.loads(content)
    except json.JSONDecodeError:
        raise RuntimeError(f"OpenAI response is not valid JSON: {content}")
    return {
        "title": obj.get("title", "").strip(),
        "body_html": obj.get("body_html", "").strip()
    }

def build_product_entry(title: str,
                        body_html: str,
                        image_url: str,
                        tags: List[str],
                        vendor: str = "AutonomaX",
                        product_type: str = "Digital Art",
                        price: str = "7.00",
                        sku_prefix: str = "AI-") -> Dict[str, object]:
    """
    Assemble a product dictionary for the AutonomaX /ecom/shopify/import API.
    """
    # Generate a SKU by slugifying the title and prefixing it.  This ensures each
    # product has a unique code.  You can customise this logic as needed.
    slug = "".join(c.lower() if c.isalnum() else "-" for c in title).strip("-")
    sku = f"{sku_prefix}{slug[:20]}"
    return {
        "title": title,
        "body_html": body_html,
        "vendor": vendor,
        "product_type": product_type,
        "tags": tags,
        "images": [image_url],
        "variants": [
            {
                "price": price,
                "sku": sku,
                "requires_shipping": False
            }
        ]
    }

def import_products(products: List[Dict[str, object]], api_url: str) -> None:
    """
    Submit the generated products to the AutonomaX API.

    This function sends a POST request to the /ecom/shopify/import endpoint.
    It prints the HTTP status and response body for debugging.
    """
    endpoint = f"{api_url.rstrip('/')}/ecom/shopify/import"
    payload = {
        "products": products,
        "dry_run": False
    }
    headers = {"Content-Type": "application/json"}

    print(f"Sending {len(products)} products to {endpoint} ...")
    response = requests.post(endpoint, headers=headers, json=payload, timeout=60)
    print(f"Status: {response.status_code}")
    try:
        print(json.dumps(response.json(), indent=2))
    except Exception:
        print(response.text)

def main() -> None:
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("Error: OPENAI_API_KEY is not set in the environment.", file=sys.stderr)
        sys.exit(1)
    api_url = os.getenv("AUTONOMAX_API_URL", "https://autonomax-api-lenljbhrqq-uc.a.run.app")

    # Define your product prompts and image URLs/paths here.  Each prompt should
    # describe the artistic concept you want the agent to expand on.  The images
    # should already exist in a location accessible to AutonomaX (e.g. a public
    # storage bucket).  You can generate the images yourself using the
    # `imagegen.make_image` tool provided by ChatGPT or another generator.
    prompts = [
        "a serene zen landscape with pastel gradients and minimal lines",
        "a tranquil abstract design inspired by ocean waves and golden sunlight"
    ]
    images = [
        "https://example.com/zen-landscape.png",
        "https://example.com/ocean-sunlight.png"
    ]
    assert len(prompts) == len(images), "Number of prompts must equal number of images"

    products: List[Dict[str, object]] = []

    for prompt, image_url in zip(prompts, images):
        print(f"Generating product for prompt: {prompt!r}")
        try:
            info = generate_title_and_description(prompt, api_key)
        except Exception as e:
            print(f"Failed to generate description: {e}", file=sys.stderr)
            continue
        # Simple tag extraction: use keywords from the prompt.  You can replace
        # this with a more sophisticated tagging algorithm if desired.
        keyword_tags = [word.strip(" ,.-").lower() for word in prompt.split() if len(word) > 2]
        tags = sorted(set(keyword_tags))
        product = build_product_entry(
            title=info["title"],
            body_html=info["body_html"],
            image_url=image_url,
            tags=tags,
            vendor="AutonomaX Prints",
            product_type="Digital Art",
            price="7.00",
            sku_prefix="ZC-"
        )
        products.append(product)
        # Respect API rate limits.  Adjust the sleep as needed.
        time.sleep(1)

    if not products:
        print("No products were generated; aborting.")
        sys.exit(1)

    import_products(products, api_url)

if __name__ == "__main__":
    main()